<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.beetmarket.member.mapper.MemberMapper">

	<!-- 회원관리 리스트 -->
	<select id="list" resultType="com.beetmarket.member.vo.MemberVO">
		select id, name, email, gender, tel,photo,status,gradeNo,gradeName,shipNo,shipName
		from (
			select rownum rnum, id, name, email, gender, tel,photo,status,gradeNo,gradeName,shipNo,shipName
			from (
				select
					m.id, m.name, m.email, m.gender, m.tel,m.photo,m.status,
					m.gradeNo,g.gradeName,
					m.shipNo,s.shipName
				from
					member m, grade g, membership s
					
					where (
					1=1
					)
					and (
					m.gradeNo = g.gradeNo and m.shipNo=s.shipNo	
					)
				order by id desc
			)
		)
		where rnum between #{pageObject.startRow} and #{pageObject.endRow}
	</select>

	<!-- 회원관리 리스트 페이지 처리를 위한 전체 데이터 개수 가져오기 -->
	<select id="getTotalRow" resultType="Long">
		select count(*)
		from member m, grade g, membership s 
		where 1=1 
		and (m.gradeNo = g.gradeNo and m.shipNo=s.shipNo)
	</select>
	

	<!-- 회원관리 글보기 조회수 1 증가 -->
	<!-- # {obj} 1. 변수의 이름, 2. vo의 getter 이름, 3. Map의 key -->
	<update id="increase">
		update member set hit = hit + 1
		where no = #{no}
	</update>

	<!-- 회원관리 등급 수정 -->
	<update id="changeGrade">
	<![CDATA[
		update member
		set gradeNo = #{gradeNo}
		where id = #{id}
	]]>
	</update>
	<!-- 회원관리 맴버쉽 수정 -->
	<update id="changeMemeberShip">
	<![CDATA[
		update member
		set shipNo = #{shipNo}
		where id = #{id}
	]]>
	</update>

	<!-- 회원관리 상태 수정 -->
	<update id="changeStatus">
	<![CDATA[
		update member
		set status = #{status}
		where id = #{id}
	]]>
	</update>
	<!-- 회원 최근 접속일 업데이트 -->
	<update id="ConDateUpdate">
	<![CDATA[
		update member
		set conDate = sysdate
		where id = #{id}
	]]>
	</update>

	<!-- 회원관리 글보기 -->
	<select id="view" resultType="com.beetmarket.member.vo.MemberVO">
		select m.id,m.name,m.tel,to_date(m.birth,'yyyy-mm-dd') birth,m.regDate,m.photo,m.conDate,
		m.email,m.gender,m.status,g.gradeName,s.shipName , g.gradeNo , s.shipNo
		from member m , grade g , memberShip s
		where id = #{id} and (m.gradeNo = g.gradeNo and m.shipNo=s.shipNo)
	</select>
	<select id="myView" resultType="com.beetmarket.member.vo.MemberVO">
		select id , name , photo , gradeNo , shipNo 
	</select>








	<!-- 회원관리 가입 -->
	<insert id="write">
		<!-- 먼저 MemberVO의 no에 setter를 이용해서 시퀀스에서 받아온 번호를 세팅해 준다. -->
		<selectKey keyProperty="no" resultType="Long" order="BEFORE">
			select member_seq.nextval from dual
		</selectKey>
		insert into member(no, title, content, writer, pw)
		values(#{no}, #{title}, #{content}, #{writer}, #{pw})
	</insert>
	
	<!-- 회원관리 수정 -->
	<update id="update">
	<![CDATA[
		update member
		set title = #{title}, content = #{content}, writer = #{writer}
		where no = ${no} and pw = #{pw}
	]]>
	</update>

	<!-- 회원관리 탈퇴 -->
	<delete id="delete">
	<![CDATA[
		delete from member
		where no = ${no} and pw = #{pw}
	]]>
	</delete>


	<!-- 회원관리 로그인 -->
	<select id="login" resultType="com.beetmarket.member.vo.LoginVO">
		select
		    m.id, m.name, m.photo, m.newMsgCnt, m.gradeNo, g.gradeName , s.shipNo ,s.shipName , m.email
		from member m, grade g , membership s 
		where
		    (id = #{id} and pw = #{pw})
		    and (m.gradeNo = g.gradeNo and m.shipNo=s.shipNo)
	</select>


</mapper>