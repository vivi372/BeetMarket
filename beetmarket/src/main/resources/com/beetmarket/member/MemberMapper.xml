<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.beetmarket.member.mapper.MemberMapper">

	<!-- 회원관리 리스트 -->
	<select id="list" resultType="com.beetmarket.member.vo.MemberVO">
		select id, name, email, gender, tel,photo,status,gradeNo,gradeName,shipNo,shipName
		from (
			select rownum rnum, id, name, email, gender, tel,photo,status,gradeNo,gradeName,shipNo,shipName
			from (
				select
					m.id, m.name, m.email, m.gender, m.tel,m.photo,m.status,
					m.gradeNo,g.gradeName,
					m.shipNo,s.shipName
				from
					member m, grade g, membership s
					
					where (
						<!-- 검색을 달아야 한다. -->
						<include refid="search" />
					)
					and (
					m.gradeNo = g.gradeNo and m.shipNo=s.shipNo	
					)
				order by id desc
			)
		)
		where rnum between #{startRow} and #{endRow}
	</select>

	<!-- 회원관리 리스트 페이지 처리를 위한 전체 데이터 개수 가져오기 -->
	<select id="getTotalRow" resultType="Long">
		select count(*)
		from member m, grade g, membership s
		<!-- 검색을 달아야한다. -->
		<include refid="search" />
		and (m.gradeNo = g.gradeNo and m.shipNo=s.shipNo)
	</select>
	
	<!-- 회원관리 리스트의 검색 처리 -->
<!-- 	<sql id="search"> -->
<!-- 		<if test="word != null and word != ''.toString()"> -->
<!-- 			where -->
			<!-- prefixOverrides="or" - 맨 앞에 or는 제거한다. -->
<!-- 			<trim prefixOverrides="or"> -->
				<!-- 'test' : 문자열(String), 't' : 문자(char) -> 문자열 - toString()사용  -->
<!-- 				<if test="key.indexOf('t') >= 0"> -->
<!-- 					or title like '%' || #{word} || '%' -->
<!-- 				</if> -->
<!-- 				<if test="key.indexOf('c') >= 0"> -->
<!-- 					or content like '%' || #{word} || '%' -->
<!-- 				</if> -->
<!-- 				<if test="key.indexOf('w') >= 0"> -->
<!-- 					or writer like '%' || #{word} || '%' -->
<!-- 				</if> -->
<!-- 			</trim> -->
<!-- 		</if> -->
<!-- 	</sql> -->

	<!-- 회원관리 글보기 조회수 1 증가 -->
	<!-- # {obj} 1. 변수의 이름, 2. vo의 getter 이름, 3. Map의 key -->
	<update id="increase">
		update member set hit = hit + 1
		where no = #{no}
	</update>

	<!-- 회원관리 글보기 -->
	<select id="view" resultType="org.zerock.member.vo.MemberVO">
		select no, title, content, writer, writeDate, hit
		from member
		where no = #{no}
	</select>

	<!-- 회원관리 글등록 -->
	<!-- 
	<insert id="write">
		insert into member(no, title, content, writer, pw)
		values(member_seq.nextval, #{title}, #{content}, #{writer}, #{pw})
	</insert>
	-->
	<insert id="write">
		<!-- 먼저 MemberVO의 no에 setter를 이용해서 시퀀스에서 받아온 번호를 세팅해 준다. -->
		<selectKey keyProperty="no" resultType="Long" order="BEFORE">
			select member_seq.nextval from dual
		</selectKey>
		insert into member(no, title, content, writer, pw)
		values(#{no}, #{title}, #{content}, #{writer}, #{pw})
	</insert>

	<!-- 트랜젝션 처리 테스트를 위한 쿼리 - 같은 no의 데이터를 등록 시도 -->
	<!-- 
	<insert id="writeTx">
		insert into member(no, title, content, writer, pw)
		values(#{no}, #{title}, #{content}, #{writer}, #{pw})
	</insert>
	-->

	<!-- 회원관리 수정 -->
	<update id="update">
	<![CDATA[
		update member
		set title = #{title}, content = #{content}, writer = #{writer}
		where no = ${no} and pw = #{pw}
	]]>
	</update>

	<!-- 회원관리 탈퇴 -->
	<delete id="delete">
	<![CDATA[
		delete from member
		where no = ${no} and pw = #{pw}
	]]>
	</delete>


	<!-- 회원관리 로그인 -->
	<select id="login" resultType="com.beetmarket.member.vo.LoginVO">
		select
		    m.id, m.name, m.photo, m.newMsgCnt, m.gradeNo, g.gradeName , s.shipNo ,s.shipName , m.email
		from member m, grade g , membership s 
		where
		    (id = #{id} and pw = #{pw})
		    and (m.gradeNo = g.gradeNo and m.shipNo=s.shipNo)
	</select>


</mapper>