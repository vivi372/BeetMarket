<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.beetmarket.goods.mapper.GoodsMapper">

	<!-- 상품 리스트 -->
	<select id="list" resultType="com.beetmarket.goods.vo.GoodsVO">
		<!-- 상품 코드, 상품명, 대표이미지, 최종판매가, 조회수 -->
		select
		goodsNo, goodsName, goodsMainImage, goodsPricem, goodsHit
		from (
		select
		rownum rnum, goodsNo,
		goodsName, goodsMainImage, goodsPricem,
		goodsHit
		from (
		select
		goodsNo,
		goodsName, goodsMainImage, goodsPricem,
		goodsHit
		from
		goods
		where
		(
		<!-- 검색을 달아야 한다. -->
		<include refid="search" />
		)
		order by goodsNo desc
		)
		)
		where rnum between
		#{pageObject.startRow} and #{pageObject.endRow}
	</select>

	<!-- 상품 리스트 페이지 처리를 위한 전체 데이터 개수 가져오기 -->
	<select id="getTotalRow" resultType="Long">
		select count(*)
		from goods
		<!-- 검색을 달아야한다. -->
		where (1=1)
		<include refid="search" />
	</select>

	<!-- 상품 리스트의 검색 처리 -->
	<sql id="search">
		<!-- 검색 데이터가 존재하면 쿼리를 추가시킨다. -->
		<if test="searchVO.exist">
			and (
			<trim prefixOverrides="and">
				<!-- 대분류 검색 추가 -->
				<if
					test="searchVO.cateHighNo != null and searchVO.cateHighNo > 0">
					and cateHighNo = #{searchVO.cateHighNo}
				</if>
				<!-- 중분류 검색 추가 -->
				<if
					test="searchVO.cateMidNo != null and searchVO.cateMidNo > 0">
					and cateMidNo = #{searchVO.cateMidNo}
				</if>
				<!-- 소분류 검색 추가 -->
				<if
					test="searchVO.cateLowNo != null and searchVO.cateLowNo > 0">
					and cateLowNo = #{searchVO.cateLowNo}
				</if>
				<!-- 상품명 검색 추가 -->
				<if
					test="searchVO.goodsName != null and searchVO.goodsName != ''.toString()">
					and goodsName like '%' || #{searchVO.goodsName} || '%'
				</if>
			</trim>
			)
		</if>
	</sql>

	<!-- 상품 보기 조회수 1 증가 -->
	<!-- # {obj} 1. 변수의 이름, 2. vo의 getter 이름, 3. Map의 key -->
	<update id="increase">
		update goods set hit = hit + 1
		where goodsNo =
		#{goodsNo}
	</update>

	<!-- 상품 정보 보기 -->
	<select id="view" resultType="com.beetmarket.goods.vo.GoodsVO">
		select
		g.goods_no, g.goods_name, g.content,
		g.cate_code1, g.cate_code2,
		c.cate_name,
		g.company, g.product_date,
		g.image_name,
		g.detail_image_name,
		p.price, p.discount, p.discount_rate,
		p.sale_price, p.delivery_charge, p.saved_rate,
		hit
		<!-- from 뒤에 사용할 수 있는 것 : 1. table, 2. select 쿼리, 3. view table -->
		from goods g, price p, category c
		where (g.goods_no = #{goods_no})
		and
		(g.goods_no = p.goods_no
		and g.cate_code1 = c.cate_code1 and
		g.cate_code2 = c.cate_code2)
	</select>
	<!-- 상품 이미지 리스트 -->
	<select id="imageList"
		resultType="com.beetmarket.goods.vo.GoodsImageVO">
		select
		image_no, goods_no, image_name
		<!-- from 뒤에 사용할 수 있는 것 : 1. table, 2. select 쿼리, 3. view table -->
		from goods_image
		where (goods_no = #{goods_no})
	</select>
	<!-- 상품 사이즈와 색상 리스트 -->
	<select id="sizeColorList"
		resultType="com.beetmarket.goods.vo.GoodsSizeColorVO">
		select
		g.goods_sizeColor_no, g.goods_no,
		g.size_no, s.size_name,
		g.color_no, c.color_name
		<!-- from 뒤에 사용할 수 있는 것 : 1. table, 2. select 쿼리, 3. view table -->
		from goods_sizeColor g, basic_color c, basic_size s
		where (g.goods_no =
		#{goods_no})
		and (g.size_no = s.size_no and g.color_no = c.color_no(+))
	</select>
	<!-- 상품 옵션 리스트 -->
	<select id="optionList"
		resultType="com.beetmarket.goods.vo.GoodsOptionVO">
		select
		goods_option_no, goods_no, option_name
		<!-- from 뒤에 사용할 수 있는 것 : 1. table, 2. select 쿼리, 3. view table -->
		from goods_option
		where (goods_no = #{goods_no})
	</select>

	<!-- 1. 상품 정보 등록 -->
	<insert id="write">
		<!-- 먼저 GoodsVO의 no에 setter를 이용해서 시퀀스에서 받아온 번호를 세팅해 준다. -->
		<selectKey keyProperty="goods_no" resultType="Long"
			order="BEFORE">
			select goods_seq.nextval from dual
		</selectKey>
		INSERT INTO goods(goods_no, cate_code1, cate_code2, goods_name,
		company, product_date, image_name, detail_image_name, content)
		VALUES
		(#{goods_no}, #{cate_code1}, #{cate_code2}, #{goods_name},
		#{company},
		#{product_date}, #{image_name},
		<!-- 지원되는 JDBC 타입 - Null 처리가 됨. VARCHAR: 문자열, INTEGER: 정수, BIGINT: 큰 정수, 
			DOUBLE: 실수, DATE: 날짜, TIMESTAMP: 타임스탬프, BOOLEAN: 논리형 -->
		#{detail_image_name, jdbcType=VARCHAR},
		#{content})
	</insert>

	<!-- 2. 상품 추가 이미지 등록 -->
	<insert id="writeImage" parameterType="java.util.List">
		<!-- 먼저 GoodsVO의 goods_no를 가져와서 세팅해 준다. -->
		INSERT INTO goods_image(image_no, goods_no, image_name)
		select
		goods_image_seq.nextval, goods_no, image_name from (
		<foreach collection="list" item="vo" separator=" union all ">
			select
			#{vo.goods_no} goods_no, #{vo.image_name} image_name
			from dual
		</foreach>
		)
	</insert>

	<!-- 3. 상품 사이즈 / 색상 등록 -->
	<insert id="writeSizeColor">
		<!-- 먼저 GoodsVO의 goods_no를 가져와서 세팅해 준다. -->
		INSERT INTO goods_sizeColor(goods_sizeColor_no, goods_no,
		size_no,
		color_no)
		select goods_sizeColor_seq.nextval, goods_no, size_no,
		color_no from (
		<foreach collection="list" item="vo" separator=" union all ">
			select #{vo.goods_no} goods_no,
			<!-- 지원되는 JDBC 타입 - Null 처리가 됨. VARCHAR: 문자열, INTEGER: 정수, BIGINT: 큰 정수, 
				DOUBLE: 실수, DATE: 날짜, TIMESTAMP: 타임스탬프, BOOLEAN: 논리형 -->
			#{vo.size_no} size_no, #{vo.color_no, jdbcType=BIGINT} color_no
			from
			dual
		</foreach>
		)
	</insert>

	<!-- 4. 상품 옵션 정보 등록 -->
	<insert id="writeOption">
		<!-- 먼저 GoodsVO의 goods_no를 가져와서 세팅해 준다. -->
		INSERT INTO goods_option(goods_option_no, goods_no,
		option_name)
		select
		goods_option_seq.nextval, goods_no, option_name from (
		<foreach collection="list" item="vo" separator=" union all ">
			select
			#{vo.goods_no} goods_no, #{vo.option_name} option_name
			from dual
		</foreach>
		)
	</insert>

	<!-- 5. 상품 가격 등록 -->
	<insert id="writePrice">
		<!-- 먼저 GoodsVO의 goods_no를 가져와서 세팅해 준다. -->
		INSERT INTO price(price_no, goods_no, price, discount,
		discount_rate,
		sale_price, delivery_charge,
		saved_rate
		<if test="sale_startDate != null">
			,sale_startDate
		</if>
		<if test="sale_endDate != null">
			, sale_endDate
		</if>
		)
		VALUES
		(price_seq.nextval, #{goods_no}, #{price},
		<!-- 지원되는 JDBC 타입 - Null 처리가 됨. VARCHAR: 문자열, INTEGER: 정수, BIGINT: 큰 정수, 
			DOUBLE: 실수, DATE: 날짜, TIMESTAMP: 타임스탬프, BOOLEAN: 논리형 -->
		#{discount, jdbcType=BIGINT},
		#{discount_rate, jdbcType=INTEGER},
		#{sale_price, jdbcType=INTEGER}, #{delivery_charge},
		#{saved_rate}
		<if test="sale_startDate != null">
			, #{sale_startDate}
		</if>
		<if test="sale_endDate != null">
			, #{sale_endDate}
		</if>

		)
	</insert>

	<!-- 상품 수정 -->
	<update id="update">
	<![CDATA[
		update goods
		set title = #{title}, content = #{content}, writer = #{writer}
		where no = ${no} and pw = #{pw}
	]]>
	</update>

	<!-- 상품 수정 -->
	<delete id="delete">
	<![CDATA[
		delete from goods
		where no = ${no} and pw = #{pw}
	]]>
	</delete>

	<!-- 사이즈 가져오기 -->
	<select id="getSize" resultType="com.beetmarket.goods.vo.SizeVO">
		select size_no, cate_code1,
		cate_code2, size_name
		from basic_size
		where cate_code1 = #{cate_code1}
	</select>
	<!-- 컬러 가져오기 -->
	<select id="getColor"
		resultType="com.beetmarket.goods.vo.ColorVO">
		select color_no, cate_code1, cate_code2, color_name
		from
		basic_color
		where cate_code1 = #{cate_code1}
	</select>

</mapper>